#!/usr/bin/env python3
# -*- coding: utf-8 -*-

## Configuration variables

device='dsseries'
AdditionalScanOptions='--mode Gray' # Lineart, Gray or Color

#AdditionalScanOptions='--brightness 30 --mode Gray'
# Gray (a!) | Lineart | Color

SaveFormatScanOnly='pdf'	# Imageformat to use in scan-only mode
SaveFormatOCR='pdf'		# File Format for ocr'ed document
TempFormat='pnm'			# Image format used for processing. Unpaper needs pnm (or similar)

# Try to catch ctrl-c in a cleaner way
try:
	import signal
	def signal_handler(signal, frame):
		print("\nInterrupted")
		try:
			sys.exit(2)
		except NameError:
			import sys
			sys.exit(2)
		signal.signal(signal.SIGINT, signal_handler)
except KeyboardInterrupt:
	print("\nInterrupted")
	try:
		sys.exit(1)
	except NameError:
		import sys
		sys.exit(1)

import argparse
from subprocess import call, Popen, PIPE
import os			# env
import random
import string
import shutil
import sys
import shlex		# execute() function
#import pp
import glob			# wildcard file remove

parser = argparse.ArgumentParser(description='Scan and start OCR.')

## General Options ##

parser.add_argument('-o',
					'--output',
					dest='output',
					help='Output filename',
					required=True)
parser.add_argument('-m',
					'--mode',
					dest='mode',
					default='scanocr',
					help='Mode to use. Values are: scanocr, scan, ocr (default: scanocr)',
					required=False)
parser.add_argument('-v',
					'--verbose',
					dest='verbose',
					action='store_true',
					default=False,
					help='Be verbose.')

## Scanner Options ##

parser.add_argument('-r',
					'--resolution',
					dest='resolution',
					default='300',
					help='Resolution to use for scan (default: 300dpi)')
parser.add_argument('-sh',
					'--scanheight',
					dest='height',
					default='297',
					help='Height of document (default: 297mm - A4)')
parser.add_argument('-sw',
					'--scanwidth',
					dest='width',
					default='211',
					help='Width of document (default: 211mm - A4)')
parser.add_argument('-p',
					'--progress',
					dest='progress',
					action='store_true',
					default=True,
					help='Show scan progress (default: yes)')

## Converting Options ##

parser.add_argument('-c',
					'--color',
					dest='color',
					action='store_true',
					default=False,
					help='Preserve colors (Do not optimize image) (default: no)')

## OCR Options ##

parser.add_argument('-mu',
					'--multi',
					dest='multi',
					action='store_true',
					default=False,
					help='Create a multi-page PDF from more than one scan (default: no)')
parser.add_argument('-l',
					'--language',
					dest='language',
					default='ger',
					help='Language to use for OCR (default: german)')



# Executes given command, returns stdout/stderr
def execute(cmd, stdin='', env=''):
	cmd = shlex.split(cmd)

	if env == '':
		p = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=PIPE)
	else:
		p = Popen(cmd, stdout=PIPE, stdin=PIPE, stderr=PIPE, env=env)

	stdout, stderr = p.communicate(stdin)
	returncode = p.wait()

	if returncode == 0:
		return (0, stdout)
	else:
		return (returncode, str(stderr))

# Executes scanimage (sane)
def scan(resolution, width, height, progress):

	print('Scan: \t\t', end='')

	progress = False

	if (progress == True):
			StringProgress = ' -p'
	else:
			StringProgress = ''
#--calibration-cache=yes
	call('scanimage --format='+TempFormat+' -d ' + device + ' --resolution '+resolution+' -x '+width+' -y '+height+StringProgress+' '+AdditionalScanOptions+' >' +TempFile+ '.'+TempFormat+'', shell=True)

	print('Done.')

	"""
	p = execute('/usr/bin/scanimage --format=tiff -d ' + device + ' --calibration-cache=yes --resolution ' + resolution + ' -x ' + width + ' -y ' + height + ' ' + StringProgress)

	if p[0] != 0:
		sys.exit ('Error! ' + str(p[1]))
	else:
		print('Done.')

	"""

# Optimize Image to black/white, will write a new Temp file
def optimizeImage(bw):

	print('Optimization: \t', end='')

	p = execute('convert ' + TempFile + bw +'.'+TempFormat+' -threshold 65%  ' + TempFile + '.bw.'+TempFormat+'')
	#p = execute('/usr/bin/unpaper --layout single --no-wipe --no-blackfilter --no-mask-center --no-mask-scan --no-border --no-border-align ' + TempFile + bw +'.'+TempFormat+' ' + TempFile + '.bw.'+TempFormat+'')

	if p[0] != 0:
		sys.exit ('Error! ' + p[1])
	else:
		print('Done.')

# Convert TempFormat to SaveFormatScanOnly (used when scanning only)
def convertToImage(bw):

	global SaveFormatScanOnly

	print('Convert: \t', end='')

	p = execute('convert '+TempFile + bw + '.'+TempFormat+' '+SaveFile+'.'+SaveFormatScanOnly)

	if p[0] != 0:
		sys.exit ('Error converting '+TempFormat+' to ' + SaveFormatScanOnly + ': ' + p[1])
	else:
		print('Done.')

# Do ocr on a single image file
def ocr(save, language):

	print('OCR: \t', end='')

	my_env = os.environ
	my_env["MALLOC_CHECK_"] = '0'

	if language == 'ger':
		language = 'deu'

	#p = execute('pdfsandwich -layout single -enforcehocr2pdf -lang '+language+' -o '+save+'.pdf '+TempFile+'.merged.pdf')
	p = execute('pdfsandwich -nopreproc -layout none -lang '+language+' -o '+save+'.pdf '+TempFile+'.merged.pdf')
	#p = execute('/usr/bin/ocrodjvu --language '+language+' -o '+save+'.'+SaveFormatOCR+' '+TempFile+'.merged.'+SaveFormatOCR+'')

	if p[0] != 0:
		sys.exit ('Error! ' + p[1])
	else:
		print('Done.')

# Merge all Tempfiles to one djvu file
#def MergeDjvu():
#	for var in *.otrkey; do nice -n 5 /usr/bin/otrtool blabla mit $var; done


# Remove garbage files, if existing
def CleanUp(filename = ''):

	if (filename == ''):
		filename = TempFile

	for filename in glob.glob(filename + '*.*') :
		os.remove(filename)


# Set Verbosity string
def verbosity():
	if (verbose == False):
		return '>/dev/null 2>&1'
	else:
		return ''


# Returns True in case the output file already exists.
def OutputFileExists(SaveFile):
	args = parser.parse_args()

	if ( (os.path.exists(SaveFile + '.'+SaveFormatOCR+'') == True and ( args.mode == 'scanocr' or args.mode == 'ocr' ) )
	or (os.path.exists(SaveFile + '.' + SaveFormatScanOnly) == True and args.mode == 'scan') ):
		return True
	else:
		return False


# Main program
def main():
	args = parser.parse_args()

	# Mode switcher - ask for output name if not given
	print('Current Mode: ', end='')
	if args.mode == 'scanocr':
		print('Scan and OCR')
		if args.output == None:
			args.output = str(input('Please give some output filename (without .'+SaveFormatOCR+'): '))
	elif args.mode == 'scan':
		print('Scan only')
		if args.output == None:
			args.output = str(input('Please give some output filename (without .'+SaveFormatOCR+'): '))
	elif args.mode == 'ocr':
		print('OCR only')
		print('FEHLT NOCH')
		sys.exit(0) # For now
	else:
		sys.exit('No valid mode given. Please choose one of: scanocr, scan, ocr')

	global TempFile, SaveFile, verbose

	# Process verbose-switch ...
	verbose = args.verbose

	# Path and name (random string) of temporary file without extension
	RandomString = ''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(6))
	TempFile = '/tmp/scanner_'+ RandomString + args.output
	SaveFile = os.getcwd() + '/' + args.output

	# check if output file exists
	if OutputFileExists(SaveFile) == True:
		sys.exit('Output file exists.')

	# Create multi-page OCR'ed PDF
	if  (args.multi == True):
		Pages = PagesOrig = int(input('How many pages does your document contain? '))

		if (Pages < 1):
			sys.exit('Not a valid amount of pages.')

		for Pages in range(1, Pages+1):
			# Get PageNR in TempFile
			TempFile = '/tmp/scanner_'+ RandomString + args.output + '_' + str(Pages)
			print('Processing page '+str(Pages)+'...')
			Pages -= 1

			# Invoke scan and optimize
			scan(args.resolution, args.width, args.height, args.progress)

			if (args.color == True):
				convertToImage('')
			else:
				optimizeImage('')

			# Wait for user to continue
			if (Pages < PagesOrig-1):
				input('Hit enter to scan the next page (' + str(Pages+2) + ')...')

		# ocr or no ocr
		if args.mode == 'scanocr':
			# Merge to pdf
			#call('stapler cat ' + TempFile + '*.pdf ' + TempFile + '.merged.pdf', shell=True)
			call('convert /tmp/scanner_'+ RandomString + args.output+'_*.bw.'+TempFormat+' '+TempFile+'.merged.pdf', shell=True)
			#MergeDjvu()

			# OCR
			ocr(SaveFile, args.language)
		elif args.mode == 'scan': # ??????
			if (args.color == True):
				call('convert '+TempFile+'.'+TempFormat+' '+TempFile+'.'+SaveFormatOCR+'', shell=True)
			else:
				call('convert /tmp/scanner_'+ RandomString + args.output+'_*.bw.'+TempFormat+' '+TempFile+'.merged.'+SaveFormatOCR+'', shell=True)

		# Clean up temporary files
		CleanUp('/tmp/scanner_'+ RandomString + args.output)

		sys.exit(0)

	# Normal operation if not in multipage-mode, scan first.
	scan(args.resolution, args.width, args.height, args.progress)

	# optimize
	if (args.color == False):
		optimizeImage('')
		blackwhite='.bw'
		call('convert '+TempFile+'.bw.'+TempFormat+' '+TempFile+'.merged.'+SaveFormatOCR+'', shell=True)
		#call('/usr/bin/cjb2 -clean '+TempFile+'.bw.'+TempFormat+' '+TempFile+'.merged.'+SaveFormatOCR+'', shell=True)
	else:
		blackwhite=''

	# convert TempFormat to image-format
	if (args.mode == 'scan'):
		convertToImage(blackwhite)

	# ocr
	if (args.mode == 'scanocr'):
		ocr(SaveFile, args.language)

	CleanUp()

	# End program
	sys.exit(0)


if __name__ == "__main__":
		main()
