#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import argparse
import subprocess
import os
import random
import string
import shutil
import sys

parser = argparse.ArgumentParser(description='Scan and start OCR.')
parser.add_argument('-o', 
					'--output', 
					dest='output',
					help='Output filename',
					required=True)
parser.add_argument('-r', 
					'--resolution', 
					dest='resolution',
					default='300', 
					help='Resolution to use for scan (default: 300dpi)')
parser.add_argument('-sh',
					'--scanheight', 
					dest='height',
					default='297', 
					help='Height of document (default: 297mm - A4)')
parser.add_argument('-sw', 
					'--scanwidth', 
					dest='width',
					default='211', 
					help='Width of document (default: 211mm - A4)')
parser.add_argument('-so', 
					'--scan-only', 
					dest='scanonly',
					action='store_true',
					default=False, 
					help='Do not ocr, just scan.')
parser.add_argument('-l', 
					'--language', 
					dest='language',
					default='ger', 
					help='Language to use for OCR (default: german)')
parser.add_argument('-v', 
					'--verbose', 
					dest='verbose',
					action='store_true',
					default=False, 
					help='Be verbose.')
parser.add_argument('-p', 
					'--progress', 
					dest='progress',
					action='store_true',
					default=True, 
					help='Show scan progress.')
					
def scan(resolution, width, height, progress, scanonly):
	if (progress == True):
			StringProgress = ' -p'
	else:
			StringProgress = ''
	
	subprocess.call('scanimage --format=tiff -d plustek --calibration-cache=yes --resolution '+resolution+' -x '+width+' -y '+height+StringProgress+' >' +TempFile+ '.tiff', shell=True)
	
	if (scanonly == True):
		subprocess.call('convert '+TempFile+'.tiff '+SaveFile+'.jpg', shell=True)
		os.remove(TempFile + '.tiff')


def optimize():
	subprocess.call('optimize2bw -i ' +TempFile+ '.tiff -o ' +TempFile+ '.png', shell=True)
	
	if (os.path.exists(TempFile + '.png') == True):
		os.remove(TempFile + '.tiff')
	else:
		sys.exit('Error while optimizing')

# Will do ocr on a single image file.
def ocr(language, verbose):
	subprocess.call('cuneiform -l ' +language+ ' -f hocr -o ' +TempFile+ '.hOCR ' +TempFile+ '.png '+verbose, shell=True)
	subprocess.call('hocr2pdf -i '+TempFile+'.png -o '+SaveFile+'.pdf < ' +TempFile+ '.hOCR '+verbose, shell=True)
	
	CleanUp()


# Remove garbage files
def CleanUp():
	os.remove(TempFile + '.png')
	os.remove(TempFile + '.hOCR')
	if os.path.exists(TempFile + '_files'):
		shutil.rmtree(TempFile + '_files')


def main():
	args = parser.parse_args()
	
	global TempFile, SaveFile, StringVerbose
	
	# Path and name (random string) of temporary file without extension
	TempFile = '/tmp/scanner_'+''.join(random.choice(string.ascii_uppercase + string.digits) for x in range(6)) + args.output
	SaveFile = os.getcwd() + '/' + args.output
	
	# Set Verbosity
	if (args.verbose == False):
		StringVerbose = '>/dev/null 2>&1'
	else:
		StringVerbose = ''
	
	# Start if file does not exist
	if ( (os.path.exists(SaveFile + '.pdf') == True and args.scanonly == False) 
	or (os.path.exists(SaveFile + '.jpg') == True and args.scanonly == True) ):
		sys.exit('Output file exists.')

	scan(args.resolution, args.width, args.height, args.progress, args.scanonly)

	if (args.scanonly == False):
		optimize()
		ocr(args.language, StringVerbose)

if __name__ == "__main__":
		main()
